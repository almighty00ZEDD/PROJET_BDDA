package miniSGBD;

public final class BufferManager {

	private static BufferManager INSTANCE;
	private static Frame [] frames; 
	
	private BufferManager() {
		frames  = new  Frame [DBParams.frameCount];
		
		for(int i = 0; i< DBParams.frameCount ; i++) {
			frames[i] = new Frame();
		}
	}
	
	public static BufferManager getInstance() {
		if(INSTANCE == null) {
			INSTANCE = new BufferManager();
		}
		return INSTANCE;
	}
	

	public byte [] GetPage(PageId pi) {
		//Lecture disque : page non chargÃ©e
		for(int i  = 0;i< frames.length;i++) {
			
		}
		return null;
	}
	
	void FreePage(PageId page,boolean valdirty) {
		
	}
	
	void FlushAll() {
		
	}
	public void Init() {
		for(int i  = 0; i < frames.length; i++) {
			System.out.println(frames[i].getPin_count() +" "+frames[i].getPi()+" " + frames[i].isDirty());
		}
	}
	
	public void Finish() {
		
	}
}
